#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <curl/curl.h>
#include <yajl/yajl_tree.h>
#include "socket.h"
#include "irc.h"
#include "gperf.h"
#include "bot.h"
#include "curl.h"
#include "common.h"

struct irc_type {
	int sock;
	int pipe[2];
	char line[IRCLEN + 1];
	size_t line_offset;
	char address[ADDRLEN];
	char port[PORTLEN];
	char nick[NICKLEN];
	char user[USERLEN];
	char channels[MAXCHANS][CHANLEN];
	int channels_set;
	bool isConnected;
};

Irc server;
Parsed_data pdata;
char test_buffer[IRCLEN + 1];
int sock, status;

ssize_t sock_readbyte(int sock, char *byte);
size_t curl_write_memory(char *data, size_t size, size_t elements, void *membuf);

void open_read(void) {

	server = MALLOC_W(sizeof(*server));
	server->sock = open("test-files/input.txt", O_RDONLY);
	if (server->sock < 0)
		exit_msg("Failed to open file");
}

void close_read(void) {

	free(server);
}

void open_write(void) {

	server = MALLOC_W(sizeof(*server));
	server->sock = open("test-files/output.txt", O_RDWR);
	if (server->sock < 0)
		exit_msg("Failed to open file");

	lseek(server->sock, 0, SEEK_SET);
}

void close_write(void) {

	quit_server(server, "bye");
}

/*****************************************************************************/

#suite irc bot
#tcase connection
#test socket_connection

	sock = sock_connect("www.google.com", "80");
	ck_assert_msg(sock >= 0, "Socket creation failed");
	close(sock);

#test irc_connection

	server = irc_connect("www.google.com", "80");
	ck_assert_msg(server != NULL, "irc connection failed");
	quit_server(server, "bye");

/*****************************************************************************/

#tcase socket read operations
#test socket_readbytes

	char c;
	int i;

	for (i = 0; sock_readbyte(server->sock, &c) > 0; i++)
		test_buffer[i] = c;
	test_buffer[i] = '\0';

	ck_assert_str_eq("lol\r\ntroll\r\n", test_buffer);

#test socket_readline

	char test_buffer2[IRCLEN + 1] = { 0 };

	lseek(server->sock, 0, SEEK_SET);
	while (sock_readline(server->sock, test_buffer, IRCLEN) > 0)
		strcat(test_buffer2, test_buffer);

	ck_assert_str_eq("loltroll", test_buffer2);

//#test parseline

//	ck_assert_int_eq(parse_irc_line(server), 0);
//	lseek(server->sock, 0, SEEK_SET);
//	ck_assert_int_eq(parse_irc_line(server), 5);

/*****************************************************************************/

#tcase socket write operations
#test write_equal_size

	ssize_t n = sock_write(server->sock, "rofl", 4);
	ck_assert_msg(n == 4 || n == -1, "Unexpected amount of bytes sent");

#test write_smaller_size

	ssize_t n = sock_write(server->sock, "troll", 0);
	ck_assert_msg(n == 0 || n == -1, "Unexpected amount of bytes sent");

#test new_nick_match

	set_nick(server, "trololol");
	ck_assert_str_eq(server->nick, "trololol");

#test new_user_match

	set_user(server, "trololol");
	ck_assert_str_eq(server->user, "trololol");

#test new_chan_match

	server->channels_set = 0;
	join_channel(server, "#trololol");
	ck_assert_str_eq(server->channels[0], "#trololol");

#test privemsg

	char msg[] = "freestyl3r\0PRIVMSG\0freestylerbot :!bot lol re";

	pdata.sender = &msg[0];
	pdata.command = &msg[11];
	pdata.message = &msg[20];

	irc_privmsg(server, pdata);
	if (strcmp(msg, "freestyl3r"))
		ck_abort_msg("privemsg parsing failed");

#test numeric_replies

	numeric_reply(server, NICKNAMEINUSE);
	if (server->nick[strlen(server->nick) - 1] != '_')
		ck_abort_msg("nick rename failed");

/*****************************************************************************/

#tcase function match
#test gperf

	Function_list flist = function_lookup("help", 4);
	ck_assert_ptr_ne(flist, NULL);

	flist = function_lookup("trolol", 6);
	ck_assert_ptr_eq(flist, NULL);

#test curl_writeback

	Mem_buffer mem = {0};
	char *data = "random stuff ftw!";
	curl_write_memory(data, strlen(data), 1, &mem);
	ck_assert_str_eq(data, mem.buffer);
	free(mem.buffer);

#test url_shortener_valid

	char *short_url = shorten_url("rofl.com");
	ck_assert_str_eq(short_url, "http://goo.gl/LJbW");
	free(short_url);

#test parameter_extraction

	char msg[] = " 	trolol  re noob  	";
	char **argv;
	int argc;

	argc = extract_params(msg, &argv);
	ck_assert_int_eq(argc, 3);
	ck_assert_str_eq(argv[0], "trolol");
	ck_assert_str_eq(argv[1], "re");
	ck_assert_str_eq(argv[2], "noob");

	free(argv);

#test getint

	ck_assert_int_eq(get_int("234", 50), 50);
	ck_assert_int_eq(get_int("-234", 50), 1);
	ck_assert_int_eq(get_int("0", 50), 1);
	ck_assert_int_eq(get_int("0", 0), 0);
	ck_assert_int_eq(get_int("543463464463634634436346436346", 2), 2);
	ck_assert_int_eq(get_int("-543463464463634634436346436346", 2), 1);
	ck_assert_int_eq(get_int("432efgdger", 21324124), 432);
	ck_assert_int_eq(get_int("sdfsdf462", 2), 1);

#test titleurl

	char *url_title = get_url_title("https://www.ntua.gr/");
	ck_assert_str_eq(url_title, "ΕΘΝΙΚΟ ΜΕΤΣΟΒΙΟ ΠΟΛΥΤΕΧΝΕΙΟ");

#test github_commits

	Github *commits;
	yajl_val root = NULL;
	int n = 10;

	commits = fetch_github_commits(&root, "foss-teimes/irc-bot", &n);

	ck_assert_str_eq(commits[0].sha,  "de7579c08e35f232af4938dc7dc325b9809d63bf");
	ck_assert_str_eq(commits[0].name, "Bill Kolokithas");
	ck_assert_str_eq(commits[0].msg,  "small changes to the shell helper script");
	ck_assert_str_eq(commits[0].url,  "https://github.com/foss-teimes/irc-bot/commit/de7579c08e35f232af4938dc7dc325b9809d63bf");
	ck_assert_str_eq(commits[2].sha,  "363e91d5e12701be9001bcf62062fd0a93561082");
	ck_assert_str_eq(commits[2].name, "Bill Kolokithas");
	ck_assert_str_eq(commits[2].msg,  "restart bot on failed exit");
	ck_assert_str_eq(commits[2].url,  "https://github.com/foss-teimes/irc-bot/commit/363e91d5e12701be9001bcf62062fd0a93561082");

	yajl_tree_free(root);

#test cmd_command

	char buf[IRCLEN];
	server = MALLOC_W(sizeof(*server));
	server->sock = open("test-files/cmd_output.txt", O_RDWR | O_CREAT, 0755);
	if (server->sock < 0)
		exit_msg("Failed to open file");

	print_cmd_output(server, "#troll", (char *[]) { "echo", "rofl", NULL });
	lseek(server->sock, 0, SEEK_SET);
	read(server->sock, buf, IRCLEN);
	buf[strlen(buf) - 3] = '\0';
	ck_assert_str_eq(buf, "PRIVMSG #troll :rofl");

	free(server);
	close(server->sock);

#test channels_joined

	int i;
	server = MALLOC_W(sizeof(*server));
	server->sock = open("test-files/channels.txt", O_RDWR | O_CREAT | O_TRUNC, 0755);
	if (server->sock < 0)
		exit_msg("Failed to open file");

	server->isConnected = true;
	join_channel(server, "#foss-teimes");
	join_channel(server, "#trolltown");
	join_channel(server, "#noobs");
	i = join_channel(server, NULL);
	ck_assert_int_eq(i, 3);
	lseek(server->sock, 0, SEEK_SET);

	sock_readline(server->sock, test_buffer, IRCLEN);
	test_buffer[strlen(test_buffer)] = '\0';

	ck_assert_str_eq(test_buffer, "JOIN #foss-teimes");

	free(server);
	close(server->sock);

/*****************************************************************************/

#main-pre
	tcase_add_unchecked_fixture(tc1_2, open_read, close_read);
	tcase_add_unchecked_fixture(tc1_3, open_write, close_write);
	curl_global_init(CURL_GLOBAL_ALL);

#main-post
	curl_global_cleanup();
	return nf == 0 ? 0 : 1;
